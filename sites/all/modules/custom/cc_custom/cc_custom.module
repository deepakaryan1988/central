<?php

/**
 * @file
 * Custom configuration for Craft Central.
 */

/**
 * Implements hook_init().
 */
function cc_custom_init() {
  $arg = arg();
  if ($arg['0'] == 'contact' && is_numeric($arg['1'])) {
    drupal_add_js(drupal_get_path('module', 'cc_custom') . '/libraries/flexslider/jquery.flexslider.js');
    drupal_add_js(drupal_get_path('module', 'cc_custom') . '/js/cc_custom.js');
    drupal_add_css(drupal_get_path('module', 'cc_custom') . '/libraries/flexslider/flexslider.css');
  }
}

/**
 * Allows modules to perform business logic when an order completes checkout.
 *
 * This hook coincides with the "Customer completes checkout" event. Only
 * business logic should be performed when this is invoked, such as updating the
 * order status, assigning the order to a user account, or sending notification
 * e-mails. Interaction with the user should instead occur through checkout
 * panes on the checkout completion page.
 *
 * @param $order
 *   The order that just completed checkout.
 */
function cc_custom_commerce_checkout_complete($order) {
  // Get cid.
  $cid = _get_cid($order);

  // Call a function to create membership in CRM.
  _creating_membership_in_crm($cid, $order);
}

/**
 * Helper function to get cid out of CRM.
 */
function _get_cid($order) {
  // If civicrm is not initialize, then return this.
  if (!civicrm_initialize()) {
    return;
  }

  // Get order contact ID.
  // Logged in user.
  if ($order->uid) {
    global $user;
    $match = CRM_Core_BAO_UFMatch::synchronizeUFMatch($user, $order->uid, $order->mail, 'Drupal', FALSE, 'Individual');
    if (!is_object($match)) {
      return FALSE;
    }
    $cid = $match->contact_id;
  }

  return $cid;
}

/**
 * Helper function to create membership in CRM.
 */
function _creating_membership_in_crm($cid, &$order) {
  // Get order details.
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  // Get the transaction object.
  $transaction = commerce_payment_transaction_load_multiple(array(), array('order_id' => $order->order_id));

  $transaction = array_pop($transaction);
  $trxn_id = $transaction->transaction_id;

  // Looping products.
  foreach ($order_wrapper->commerce_line_items as $delta => $line_item_wrapper) {
    if (in_array($line_item_wrapper->type->value(), commerce_product_line_item_types())) {
      // Getting all the parameters.
      $title = $line_item_wrapper->commerce_product->title->value();
      $is_membership = $line_item_wrapper->commerce_product->field_is_membership->value();

      $membership_type_obj = $line_item_wrapper->commerce_product->field_membership_type->value();
      $membership_type = $membership_type_obj->name;

      $membership_start_date = $line_item_wrapper->commerce_product->field_membership_start_date->value();

      // Calling a function to do all the operation.
      _assigning_membership_contribution($trxn_id, $transaction, $cid, $title, $is_membership, $membership_type, $membership_start_date);
    }
  }
}

/**
 * Helper function to create membership in CRM.
 */
function _assigning_membership_contribution($trxn_id, $transaction, $cid, $title, $is_membership, $membership_type, $membership_start_date) {

  // Check if membership is there for that product, then don't proceed further.
  if (!$is_membership) {
    return;
  }

  // If civicrm is not initialize, then return this.
  if (!civicrm_initialize()) {
    return;
  }

  // Create membership.
  $membership_result = civicrm_api3('Membership', 'create', array(
    'sequential' => 1,
    'membership_type_id' => !empty($membership_type) ? $membership_type : 'General',
    'contact_id' => $cid,
    'source' => $title,
    'trxn_id' => $trxn_id . '_dc',
    'join_date' => !empty($membership_start_date) ? date('Y-m-d', $membership_start_date) : date('Y-m-d', $transaction->created),
    'start_date' => !empty($membership_start_date) ? date('Y-m-d', $membership_start_date) : date('Y-m-d', $transaction->created),
  ));

  // Get contribution items.
  $contribution_result = civicrm_api3('Contribution', 'get', array(
    'sequential' => 1,
    'trxn_id' => $trxn_id . '_dc',
    'contact_id' => $cid,
  ));

  // Create membership payment to attach to membership and contribution.
  $membership_payment_result = civicrm_api3('MembershipPayment', 'create', array(
    'sequential' => 1,
    'membership_id' => $membership_result['id'],
    'contribution_id' => $contribution_result['id'],
  ));
}
